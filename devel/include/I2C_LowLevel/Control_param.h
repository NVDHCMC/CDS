// Generated by gencpp from file I2C_LowLevel/Control_param.msg
// DO NOT EDIT!


#ifndef I2C_LOWLEVEL_MESSAGE_CONTROL_PARAM_H
#define I2C_LOWLEVEL_MESSAGE_CONTROL_PARAM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace I2C_LowLevel
{
template <class ContainerAllocator>
struct Control_param_
{
  typedef Control_param_<ContainerAllocator> Type;

  Control_param_()
    : steering_angle(0.0)
    , throttle(0)  {
    }
  Control_param_(const ContainerAllocator& _alloc)
    : steering_angle(0.0)
    , throttle(0)  {
  (void)_alloc;
    }



   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;

   typedef uint32_t _throttle_type;
  _throttle_type throttle;




  typedef boost::shared_ptr< ::I2C_LowLevel::Control_param_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::I2C_LowLevel::Control_param_<ContainerAllocator> const> ConstPtr;

}; // struct Control_param_

typedef ::I2C_LowLevel::Control_param_<std::allocator<void> > Control_param;

typedef boost::shared_ptr< ::I2C_LowLevel::Control_param > Control_paramPtr;
typedef boost::shared_ptr< ::I2C_LowLevel::Control_param const> Control_paramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::I2C_LowLevel::Control_param_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::I2C_LowLevel::Control_param_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace I2C_LowLevel

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'I2C_LowLevel': ['/home/ubuntu/catkin_ws/src/I2C_LowLevel/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::I2C_LowLevel::Control_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::I2C_LowLevel::Control_param_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::I2C_LowLevel::Control_param_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d5b20e2f8b2fbd2c6b6eaefb88e997d7";
  }

  static const char* value(const ::I2C_LowLevel::Control_param_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd5b20e2f8b2fbd2cULL;
  static const uint64_t static_value2 = 0x6b6eaefb88e997d7ULL;
};

template<class ContainerAllocator>
struct DataType< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "I2C_LowLevel/Control_param";
  }

  static const char* value(const ::I2C_LowLevel::Control_param_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steering_angle\n\
uint32 throttle\n\
";
  }

  static const char* value(const ::I2C_LowLevel::Control_param_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering_angle);
      stream.next(m.throttle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Control_param_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::I2C_LowLevel::Control_param_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::I2C_LowLevel::Control_param_<ContainerAllocator>& v)
  {
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
    s << indent << "throttle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.throttle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // I2C_LOWLEVEL_MESSAGE_CONTROL_PARAM_H
